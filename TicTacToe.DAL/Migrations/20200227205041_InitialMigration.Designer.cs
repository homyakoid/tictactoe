// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicTacToe.DAL;

namespace TicTacToe.DAL.Migrations
{
    [DbContext(typeof(TTTContext))]
    [Migration("20200227205041_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TicTacToe.Core.Models.Connection", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConnectionID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("TicTacToe.Core.Models.Game", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsOver")
                        .HasColumnType("bit");

                    b.Property<int?>("Player1ID")
                        .HasColumnType("int");

                    b.Property<int?>("Player1StatusID")
                        .HasColumnType("int");

                    b.Property<int?>("Player2ID")
                        .HasColumnType("int");

                    b.Property<int?>("Player2StatusID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Player1ID");

                    b.HasIndex("Player1StatusID");

                    b.HasIndex("Player2ID");

                    b.HasIndex("Player2StatusID");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("TicTacToe.Core.Models.GameResult", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GameID")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("GameID");

                    b.HasIndex("PlayerID");

                    b.ToTable("GameResults");
                });

            modelBuilder.Entity("TicTacToe.Core.Models.Move", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GameID")
                        .HasColumnType("int");

                    b.Property<int>("MovePosition")
                        .HasColumnType("int");

                    b.Property<int>("PlayerID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("GameID");

                    b.HasIndex("PlayerID");

                    b.ToTable("Moves");
                });

            modelBuilder.Entity("TicTacToe.Core.Models.PlayerStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("PlayerStatuses");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Status = "Pending"
                        },
                        new
                        {
                            ID = 2,
                            Status = "Online"
                        },
                        new
                        {
                            ID = 3,
                            Status = "Leave"
                        });
                });

            modelBuilder.Entity("TicTacToe.Core.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPlaying")
                        .HasColumnType("bit");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasAlternateKey("NickName");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TicTacToe.Core.Models.Connection", b =>
                {
                    b.HasOne("TicTacToe.Core.Models.User", "User")
                        .WithMany("Connections")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TicTacToe.Core.Models.Game", b =>
                {
                    b.HasOne("TicTacToe.Core.Models.User", "Player1")
                        .WithMany("Player1Games")
                        .HasForeignKey("Player1ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TicTacToe.Core.Models.PlayerStatus", "Player1Status")
                        .WithMany("Player1Games")
                        .HasForeignKey("Player1StatusID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TicTacToe.Core.Models.User", "Player2")
                        .WithMany("Player2Games")
                        .HasForeignKey("Player2ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TicTacToe.Core.Models.PlayerStatus", "Player2Status")
                        .WithMany("Player2Games")
                        .HasForeignKey("Player2StatusID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TicTacToe.Core.Models.GameResult", b =>
                {
                    b.HasOne("TicTacToe.Core.Models.Game", "Game")
                        .WithMany("GameResults")
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TicTacToe.Core.Models.User", "Player")
                        .WithMany("GameResults")
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TicTacToe.Core.Models.Move", b =>
                {
                    b.HasOne("TicTacToe.Core.Models.Game", "Game")
                        .WithMany("Moves")
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TicTacToe.Core.Models.User", "Player")
                        .WithMany("Moves")
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
